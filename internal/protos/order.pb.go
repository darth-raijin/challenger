// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: order.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderType enumerates the different types of orders
type OrderType int32

const (
	OrderType_UNKNOWN           OrderType = 0 // Default Value, should not be used
	OrderType_MARKET            OrderType = 1 // Market order
	OrderType_LIMIT             OrderType = 2 // Limit order
	OrderType_STOP_LOSS         OrderType = 3 // Stop loss order
	OrderType_STOP_LOSS_LIMIT   OrderType = 4 // Stop loss limit order
	OrderType_TAKE_PROFIT       OrderType = 5 // Take profit order
	OrderType_TAKE_PROFIT_LIMIT OrderType = 6 // Take profit limit order
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MARKET",
		2: "LIMIT",
		3: "STOP_LOSS",
		4: "STOP_LOSS_LIMIT",
		5: "TAKE_PROFIT",
		6: "TAKE_PROFIT_LIMIT",
	}
	OrderType_value = map[string]int32{
		"UNKNOWN":           0,
		"MARKET":            1,
		"LIMIT":             2,
		"STOP_LOSS":         3,
		"STOP_LOSS_LIMIT":   4,
		"TAKE_PROFIT":       5,
		"TAKE_PROFIT_LIMIT": 6,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[0].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[0]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

// OrderSide enumerates the side of the order, buy or sell
type OrderSide int32

const (
	OrderSide_UNDEFINED OrderSide = 0 // Default Value, should not be used
	OrderSide_BUY       OrderSide = 1 // Buy order
	OrderSide_SELL      OrderSide = 2 // Sell order
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "UNDEFINED",
		1: "BUY",
		2: "SELL",
	}
	OrderSide_value = map[string]int32{
		"UNDEFINED": 0,
		"BUY":       1,
		"SELL":      2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[1].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[1]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

// OrderStatus enumerates possible states of the order
type OrderStatus int32

const (
	OrderStatus_PENDING          OrderStatus = 0 // Order has been placed but not processed yet
	OrderStatus_FILLED           OrderStatus = 1 // Order has been completely filled
	OrderStatus_PARTIALLY_FILLED OrderStatus = 2 // Order has been partially filled
	OrderStatus_CANCELED         OrderStatus = 3 // Order has been canceled
	OrderStatus_REJECTED         OrderStatus = 4 // Order has been rejected
	OrderStatus_EXPIRED          OrderStatus = 5 // Order has expired
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "PENDING",
		1: "FILLED",
		2: "PARTIALLY_FILLED",
		3: "CANCELED",
		4: "REJECTED",
		5: "EXPIRED",
	}
	OrderStatus_value = map[string]int32{
		"PENDING":          0,
		"FILLED":           1,
		"PARTIALLY_FILLED": 2,
		"CANCELED":         3,
		"REJECTED":         4,
		"EXPIRED":          5,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[2].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[2]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string      `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                      // Identifier for the exchange
	BuySymbol  string      `protobuf:"bytes,2,opt,name=buySymbol,proto3" json:"buySymbol,omitempty"`                    // Trading symbol for the token being bought
	SellSymbol string      `protobuf:"bytes,3,opt,name=sellSymbol,proto3" json:"sellSymbol,omitempty"`                  // Trading symbol for the token being bought
	Type       OrderType   `protobuf:"varint,4,opt,name=type,proto3,enum=protos.OrderType" json:"type,omitempty"`       // Type of the order, e.g., limit, market
	Side       OrderSide   `protobuf:"varint,5,opt,name=side,proto3,enum=protos.OrderSide" json:"side,omitempty"`       // Buy or sell
	Quantity   float64     `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`                    // Quantity of the asset to buy or sell
	Price      float64     `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`                          // Price per unit for limit orders; ignored if market order
	Status     OrderStatus `protobuf:"varint,8,opt,name=status,proto3,enum=protos.OrderStatus" json:"status,omitempty"` // Status of the order, e.g., pending, completed
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Order) GetBuySymbol() string {
	if x != nil {
		return x.BuySymbol
	}
	return ""
}

func (x *Order) GetSellSymbol() string {
	if x != nil {
		return x.SellSymbol
	}
	return ""
}

func (x *Order) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNKNOWN
}

func (x *Order) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNDEFINED
}

func (x *Order) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_PENDING
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x75, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x7b, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x06, 0x2a, 0x2d, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_order_proto_goTypes = []interface{}{
	(OrderType)(0),   // 0: protos.OrderType
	(OrderSide)(0),   // 1: protos.OrderSide
	(OrderStatus)(0), // 2: protos.OrderStatus
	(*Order)(nil),    // 3: protos.Order
}
var file_order_proto_depIdxs = []int32{
	0, // 0: protos.Order.type:type_name -> protos.OrderType
	1, // 1: protos.Order.side:type_name -> protos.OrderSide
	2, // 2: protos.Order.status:type_name -> protos.OrderStatus
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		EnumInfos:         file_order_proto_enumTypes,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
